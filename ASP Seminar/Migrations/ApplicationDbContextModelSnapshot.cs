// <auto-generated />
using System;
using ASP_Seminar.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ASP_Seminar.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ASP_Seminar.Data.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ASP_Seminar.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "LRF"
                        },
                        new
                        {
                            Id = 2,
                            Title = "HRF"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Udica"
                        },
                        new
                        {
                            Id = 4,
                            Title = "Stap"
                        },
                        new
                        {
                            Id = 5,
                            Title = "Jig"
                        },
                        new
                        {
                            Id = 6,
                            Title = "Najlon"
                        },
                        new
                        {
                            Id = 7,
                            Title = "Upredenica"
                        },
                        new
                        {
                            Id = 8,
                            Title = "Olovo"
                        });
                });

            modelBuilder.Entity("ASP_Seminar.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BillingAddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Discount")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ShippingAddressId")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(7,2)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("ShippingAddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("ASP_Seminar.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(9,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(9,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("ASP_Seminar.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(9,2)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(9,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Sharpest hook in the shed.",
                            Price = 3.90m,
                            Quantity = 15m,
                            Title = "Udica 1/0"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Sharpest hook in the shed.",
                            Price = 3.90m,
                            Quantity = 25m,
                            Title = "Udica 2/0"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Sharpest hook in the shed.",
                            Price = 3.90m,
                            Quantity = 17m,
                            Title = "Udica 4/0"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Sharpest hook in the shed.",
                            Price = 3.90m,
                            Quantity = 23m,
                            Title = "Udica 2"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Sharpest hook in the shed.",
                            Price = 3.90m,
                            Quantity = 12m,
                            Title = "Udica 4"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Mostly for jigging, action 25-50g",
                            Price = 79.9m,
                            Quantity = 7m,
                            Title = "Jigmaher 5000"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Mostly for jigging, action 15-25g",
                            Price = 69.9m,
                            Quantity = 2m,
                            Title = "Jigmaher 3000"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Mostly for jigging, action 5-15g",
                            Price = 59.9m,
                            Quantity = 0m,
                            Title = "Jigmaher 2000"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Grounded design! Action 20-50g",
                            Price = 65m,
                            Quantity = 5m,
                            Title = "Fermaher 50"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Grounded design! Action 40-70g",
                            Price = 75m,
                            Quantity = 3m,
                            Title = "Fermaher 60"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Grounded design! Action 60-120g",
                            Price = 95m,
                            Quantity = 3m,
                            Title = "Fermaher 70"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Float like a butterfly, fish in the sea. 3.0m",
                            Price = 52m,
                            Quantity = 4m,
                            Title = "Plovakher 10"
                        },
                        new
                        {
                            Id = 13,
                            Description = "Float like a butterfly, fish in the sea. 3.7m",
                            Price = 59m,
                            Quantity = 2m,
                            Title = "Plovakher 11"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Float like a butterfly, fish in the sea. 4.0m",
                            Price = 69m,
                            Quantity = 1m,
                            Title = "Plovakher 12"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Float like a butterfly, fish in the sea. 4.2m",
                            Price = 85m,
                            Quantity = 1m,
                            Title = "Plovakher 13"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Durable, better than the rest!",
                            Price = 8.9m,
                            Quantity = 12m,
                            Title = "Monolayn .17 Ultra"
                        },
                        new
                        {
                            Id = 17,
                            Description = "Durable, better than the rest!",
                            Price = 8.9m,
                            Quantity = 15m,
                            Title = "Monolayn .22 Ultra"
                        },
                        new
                        {
                            Id = 18,
                            Description = "Durable, better than the rest!",
                            Price = 8.9m,
                            Quantity = 9m,
                            Title = "Monolayn .25 Ultra"
                        },
                        new
                        {
                            Id = 19,
                            Description = "Durable, better than the rest!",
                            Price = 9.9m,
                            Quantity = 8m,
                            Title = "Monolayn .28 Ultra"
                        },
                        new
                        {
                            Id = 20,
                            Description = "Durable, better than the rest!",
                            Price = 9.9m,
                            Quantity = 10m,
                            Title = "Monolayn .35 Ultra"
                        },
                        new
                        {
                            Id = 21,
                            Description = "Durable, better than the rest!",
                            Price = 12.9m,
                            Quantity = 5m,
                            Title = "Monolayn .40 Ultra"
                        },
                        new
                        {
                            Id = 22,
                            Description = "Durable!",
                            Price = 6.9m,
                            Quantity = 13m,
                            Title = "Monolayn .16 Mid"
                        },
                        new
                        {
                            Id = 23,
                            Description = "Durable!",
                            Price = 7.9m,
                            Quantity = 12m,
                            Title = "Monolayn .235 Mid"
                        },
                        new
                        {
                            Id = 24,
                            Description = "For tournaments and recreational use.",
                            Price = 18.25m,
                            Quantity = 7m,
                            Title = "Shpagodenica #.4 Pro X8"
                        },
                        new
                        {
                            Id = 25,
                            Description = "For tournaments and recreational use.",
                            Price = 18.25m,
                            Quantity = 6m,
                            Title = "Shpagodenica #.6 Pro X8"
                        },
                        new
                        {
                            Id = 26,
                            Description = "For tournaments and recreational use.",
                            Price = 22.25m,
                            Quantity = 7m,
                            Title = "Shpagodenica #.8 Pro X8"
                        },
                        new
                        {
                            Id = 27,
                            Description = "For tournaments and recreational use.",
                            Price = 24.25m,
                            Quantity = 4m,
                            Title = "Shpagodenica #1 Pro X8"
                        },
                        new
                        {
                            Id = 28,
                            Description = "For recreational use.",
                            Price = 14.25m,
                            Quantity = 9m,
                            Title = "Shpagodenica #.6 X4"
                        },
                        new
                        {
                            Id = 29,
                            Description = "For recreational use.",
                            Price = 15.25m,
                            Quantity = 4m,
                            Title = "Shpagodenica #.8 X4"
                        },
                        new
                        {
                            Id = 30,
                            Description = "For recreational use.",
                            Price = 16.25m,
                            Quantity = 5m,
                            Title = "Shpagodenica #1 X4"
                        },
                        new
                        {
                            Id = 31,
                            Description = "Floats to the bottom.",
                            Price = 0.5m,
                            Quantity = 15m,
                            Title = "Olovnica Teary 5g"
                        },
                        new
                        {
                            Id = 32,
                            Description = "Floats to the bottom.",
                            Price = 0.5m,
                            Quantity = 12m,
                            Title = "Olovnica Teary 10g"
                        },
                        new
                        {
                            Id = 33,
                            Description = "Floats to the bottom.",
                            Price = 0.5m,
                            Quantity = 14m,
                            Title = "Olovnica Teary 15g"
                        },
                        new
                        {
                            Id = 34,
                            Description = "Sinks like a small rock.",
                            Price = 1m,
                            Quantity = 11m,
                            Title = "Olovnica Diamonde 25g"
                        },
                        new
                        {
                            Id = 35,
                            Description = "Sinks like a small rock.",
                            Price = 1m,
                            Quantity = 7m,
                            Title = "Olovnica Diamonde 30g"
                        });
                });

            modelBuilder.Entity("ASP_Seminar.Models.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 3,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 3,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 3,
                            ProductId = 4
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            ProductId = 5
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 4,
                            ProductId = 6
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 4,
                            ProductId = 7
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            ProductId = 8
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 4,
                            ProductId = 9
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 4,
                            ProductId = 10
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 4,
                            ProductId = 11
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 4,
                            ProductId = 12
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 4,
                            ProductId = 13
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 4,
                            ProductId = 14
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 4,
                            ProductId = 15
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 6,
                            ProductId = 16
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 6,
                            ProductId = 17
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 6,
                            ProductId = 18
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 6,
                            ProductId = 19
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 6,
                            ProductId = 20
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 6,
                            ProductId = 21
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 6,
                            ProductId = 22
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 6,
                            ProductId = 23
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 7,
                            ProductId = 24
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 7,
                            ProductId = 25
                        },
                        new
                        {
                            Id = 26,
                            CategoryId = 7,
                            ProductId = 26
                        },
                        new
                        {
                            Id = 27,
                            CategoryId = 7,
                            ProductId = 27
                        },
                        new
                        {
                            Id = 28,
                            CategoryId = 7,
                            ProductId = 28
                        },
                        new
                        {
                            Id = 29,
                            CategoryId = 7,
                            ProductId = 29
                        },
                        new
                        {
                            Id = 30,
                            CategoryId = 7,
                            ProductId = 30
                        },
                        new
                        {
                            Id = 31,
                            CategoryId = 8,
                            ProductId = 31
                        },
                        new
                        {
                            Id = 32,
                            CategoryId = 8,
                            ProductId = 32
                        },
                        new
                        {
                            Id = 33,
                            CategoryId = 8,
                            ProductId = 33
                        },
                        new
                        {
                            Id = 34,
                            CategoryId = 8,
                            ProductId = 34
                        },
                        new
                        {
                            Id = 35,
                            CategoryId = 8,
                            ProductId = 35
                        },
                        new
                        {
                            Id = 36,
                            CategoryId = 5,
                            ProductId = 6
                        },
                        new
                        {
                            Id = 37,
                            CategoryId = 5,
                            ProductId = 7
                        },
                        new
                        {
                            Id = 38,
                            CategoryId = 5,
                            ProductId = 8
                        },
                        new
                        {
                            Id = 39,
                            CategoryId = 1,
                            ProductId = 8
                        });
                });

            modelBuilder.Entity("ASP_Seminar.Models.UserAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("UserAddress");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "5ca38518-9079-4bda-83db-fd6367f14e6a",
                            ConcurrencyStamp = "4644a99c-f4d1-438c-b393-aa0e01d88841",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ASP_Seminar.Models.Order", b =>
                {
                    b.HasOne("ASP_Seminar.Models.UserAddress", "BillingAddress")
                        .WithMany()
                        .HasForeignKey("BillingAddressId");

                    b.HasOne("ASP_Seminar.Models.UserAddress", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressId");

                    b.HasOne("ASP_Seminar.Data.AppUser", null)
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("BillingAddress");

                    b.Navigation("ShippingAddress");
                });

            modelBuilder.Entity("ASP_Seminar.Models.OrderItem", b =>
                {
                    b.HasOne("ASP_Seminar.Models.Order", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASP_Seminar.Models.Product", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ASP_Seminar.Models.ProductCategory", b =>
                {
                    b.HasOne("ASP_Seminar.Models.Category", null)
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASP_Seminar.Models.Product", null)
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ASP_Seminar.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ASP_Seminar.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASP_Seminar.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ASP_Seminar.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ASP_Seminar.Data.AppUser", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ASP_Seminar.Models.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("ASP_Seminar.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ASP_Seminar.Models.Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("ProductCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
